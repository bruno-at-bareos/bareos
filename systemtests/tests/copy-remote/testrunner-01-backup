#!/bin/bash
#   BAREOSÂ® - Backup Archiving REcovery Open Sourced
#
#   Copyright (C) 2019-2024 Bareos GmbH & Co. KG
#
#   This program is Free Software; you can redistribute it and/or
#   modify it under the terms of version three of the GNU Affero General Public
#   License as published by the Free Software Foundation and included
#   in the file LICENSE.
#
#   This program is distributed in the hope that it will be useful, but
#   WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
#   Affero General Public License for more details.
#
#   You should have received a copy of the GNU Affero General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
#   02110-1301, USA.

# this test will create a reference full backup,
# then add large incremental data to several volumes on same source pool
# all volume are updated as Used so copy can pick them

set -e
set -o pipefail
set -u

TestName=01-backup

#shellcheck source=../environment.in
. ./environment

#shellcheck source=../scripts/functions
. "${rscripts}"/functions

log="${tmp}/${TestName}.log"

check_log() {
  if ! grep -q "$@" "${log}"; then
    echo "'$*' not found in ${log}" >&2
    estat=1
  fi
}

setup_data
rm -rf ${tmp}/data/*
# create first file
dd if=/dev/urandom of="${tmp}/data/file-001" bs=1M count=1

start_test
# initial full
cat <<END_OF_DATA >"${tmp}/bconcmds"
@$out /dev/null
messages
@$out ${log}
label volume=Full-0001 storage=File pool=Full
run job=backup-bareos-fd yes
wait
update volume=Full-0001 volstatus=Used
messages
quit
END_OF_DATA

run_bconsole "${tmp}/bconcmds"

check_for_zombie_jobs storage=File

check_log -F 'Catalog record for Volume "Full-0001", Slot 0 successfully created.'
check_log 'Termination:.*Backup OK'

# add enough more big data and run incremental but in a deterministic way.
for D in $(seq -w 002 005);do
  dd if=/dev/urandom of="${tmp}/data/file-${D}" bs=1M count=1
done

cat <<END_OF_DATA >"${tmp}/bconcmds"
@$out /dev/null
messages
@$out ${log}
label volume=Full-0002 storage=File pool=Full
run job=backup-bareos-fd pool=Full yes
wait
messages
quit
END_OF_DATA

run_bconsole "${tmp}/bconcmds"

# Find the name of last volume
# force status to Used so it will pick by copy volumes
for V in $(bin/bconsole <<< ".api 1
list volumes pool=Full
" | awk -F "|" '/Full-/ {gsub(" ","",$2); print $2}');do
bin/bconsole <<< "update volume=${V} volstatus=Used"
done

check_log -F 'Catalog record for Volume "Full-0002", Slot 0 successfully created.'
check_log 'Termination:.*Backup OK'

end_test
